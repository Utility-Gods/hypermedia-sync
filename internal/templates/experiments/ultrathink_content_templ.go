// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package experiments

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"hypermedia-sync/internal/templates/layout"
	"strings"
	"time"
)

func getAttribute(data, attr string) string {
	parts := strings.Split(data, " ")
	for _, part := range parts {
		if strings.HasPrefix(part, attr+"=") {
			value := strings.TrimPrefix(part, attr+"=")
			return strings.Trim(value, "\"")
		}
	}
	return ""
}

var ultrathinkScriptHandle = templ.NewOnceHandle()

type DrawingElement struct {
	ID      string    `json:"id"`
	Type    string    `json:"type"` // "path", "rect", "circle", "text"
	Data    string    `json:"data"` // SVG path data or element attributes
	Color   string    `json:"color"`
	User    string    `json:"user"`
	Created time.Time `json:"created"`
}

type CanvasState struct {
	Elements []DrawingElement `json:"elements"`
	Width    int              `json:"width"`
	Height   int              `json:"height"`
}

type UltraThinkPageData struct {
	Canvas       CanvasState
	OriginatorID string
	OnlineCount  int
}

func UltraThinkPageFull(data UltraThinkPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = UltraThinkPageContent(data).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layout.AppWithSSE("ULTRATHINK - Collaborative Canvas - HTMX + SSE Hypermedia Sync", data.OnlineCount, data.OriginatorID).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UltraThinkPageContent(data UltraThinkPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = UltraThinkHero().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = UltraThinkToolbar(data.OriginatorID).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = UltraThinkCanvas(data.Canvas).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = UltraThinkScript(data.OriginatorID).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UltraThinkHero() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = layout.Breadcrumb([]layout.BreadcrumbItem{
			{Label: "Experiments", URL: "/"},
			{Label: "ULTRATHINK", URL: ""},
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div class=\"text-center py-6 px-4\"><h1 class=\"text-3xl md:text-4xl font-bold text-secondary-50 mb-3\">ULTRATHINK</h1><p class=\"text-lg text-secondary-300 max-w-2xl mx-auto\">Collaborative Real-Time Canvas â€¢ Draw Together with Pure Hypermedia</p></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UltraThinkToolbar(originatorID string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-4\"><div class=\"bg-secondary-800/30 rounded-xl border border-secondary-700 p-4\"><div class=\"flex flex-wrap items-center gap-4\"><div class=\"flex items-center gap-2\"><label class=\"text-secondary-300 text-sm font-medium\">Tool:</label> <select id=\"tool-select\" class=\"bg-secondary-700 border border-secondary-600 rounded-lg px-3 py-1 text-secondary-100 text-sm\"><option value=\"pen\">Pen</option> <option value=\"rect\">Rectangle</option> <option value=\"circle\">Circle</option> <option value=\"text\">Text</option></select></div><div class=\"flex items-center gap-2\"><label class=\"text-secondary-300 text-sm font-medium\">Color:</label> <input type=\"color\" id=\"color-picker\" value=\"#f54a00\" class=\"w-8 h-8 rounded border border-secondary-600 bg-secondary-700\"></div><div class=\"flex items-center gap-2\"><label class=\"text-secondary-300 text-sm font-medium\">Size:</label> <input type=\"range\" id=\"brush-size\" min=\"1\" max=\"20\" value=\"3\" class=\"w-20\"> <span id=\"size-display\" class=\"text-secondary-300 text-sm w-6\">3</span></div><button id=\"clear-canvas-btn\" class=\"px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors\" hx-post=\"/experiments/ultrathink/clear\" hx-target=\"#canvas-container\" hx-swap=\"innerHTML\">Clear Canvas</button><div id=\"status-message\" class=\"text-secondary-400 text-sm\"></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UltraThinkCanvas(canvas CanvasState) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8\"><div class=\"bg-secondary-800/30 rounded-xl border border-secondary-700 p-6\"><div id=\"canvas-container\" class=\"flex justify-center\" sse-swap=\"canvas-cleared\" hx-swap=\"innerHTML\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = CanvasSVG(canvas).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func CanvasSVG(canvas CanvasState) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<svg id=\"canvas-svg\" width=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", canvas.Width))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 125, Col: 41}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" height=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", canvas.Height))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 126, Col: 43}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" class=\"border border-secondary-600 bg-white rounded-lg cursor-crosshair\" sse-swap=\"canvas-element-added\" hx-swap=\"beforeend\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, element := range canvas.Elements {
			templ_7745c5c3_Err = DrawingElementSVG(element).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func DrawingElementSVG(element DrawingElement) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		switch element.Type {
		case "path":
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<path d=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(element.Data)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 140, Col: 25}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" stroke=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(element.Color)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 140, Col: 50}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" stroke-width=\"3\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		case "rect":
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<rect x=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var13 string
			templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "x"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 142, Col: 44}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\" y=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var14 string
			templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "y"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 142, Col: 82}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\" width=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "width"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 142, Col: 128}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\" height=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var16 string
			templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "height"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 142, Col: 176}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\" fill=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var17 string
			templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(element.Color)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 142, Col: 199}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "\" opacity=\"0.7\"></rect>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		case "circle":
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<circle cx=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var18 string
			templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "cx"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 144, Col: 48}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" cy=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "cy"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 144, Col: 88}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" r=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "r"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 144, Col: 126}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\" fill=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var21 string
			templ_7745c5c3_Var21, templ_7745c5c3_Err = templ.JoinStringErrs(element.Color)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 144, Col: 149}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var21))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "\" opacity=\"0.7\"></circle>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		case "text":
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<text x=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var22 string
			templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "x"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 146, Col: 44}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" y=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var23 string
			templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "y"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 146, Col: 82}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" fill=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var24 string
			templ_7745c5c3_Var24, templ_7745c5c3_Err = templ.JoinStringErrs(element.Color)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 146, Col: 105}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var24))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" font-family=\"Inter, sans-serif\" font-size=\"16\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var25 string
			templ_7745c5c3_Var25, templ_7745c5c3_Err = templ.JoinStringErrs(getAttribute(element.Data, "text"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/experiments/ultrathink_content.templ`, Line: 146, Col: 191}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var25))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "</text>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

func DrawingElementSSE(element DrawingElement) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var26 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var26 == nil {
			templ_7745c5c3_Var26 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = DrawingElementSVG(element).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func UltraThinkScript(originatorID string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var27 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var27 == nil {
			templ_7745c5c3_Var27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSONScript("ultrathinkOriginatorId", originatorID).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var28 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "<script type=\"text/javascript\">\n\t\t\t(function () {\n\t\t\t\tvar originatorId = JSON.parse(document.getElementById('ultrathinkOriginatorId').textContent);\n\t\t\t\tvar isDrawing = false;\n\t\t\t\tvar currentPath = '';\n\t\t\t\tvar currentTool = 'pen';\n\t\t\t\tvar currentColor = '#f54a00';\n\t\t\t\tvar brushSize = 3;\n\t\t\t\t\n\t\t\t\t// Get canvas and toolbar elements\n\t\t\t\tvar canvas = document.getElementById('canvas-svg');\n\t\t\t\t\n\t\t\t\t// Add originator ID to all HTMX requests\n\t\t\t\tdocument.addEventListener('htmx:configRequest', function(evt) {\n\t\t\t\t\tevt.detail.headers['X-Originator-ID'] = originatorId;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// HTMX SSE debugging - let's trace all SSE events\n\t\t\t\tconsole.log('Setting up HTMX SSE event listeners...');\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Listen for specific canvas events\n\t\t\t\tdocument.addEventListener('htmx:sseMessage', function(evt) {\n\t\t\t\t\tif (evt.detail.type === 'canvas-element-added') {\n\t\t\t\t\t\tconsole.log('[CANVAS] Processing canvas-element-added event');\n\t\t\t\t\t\tconsole.log('[CANVAS] Event data:', evt.detail.data);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Parse SVG content with proper SVG namespace\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tvar svgDoc = parser.parseFromString('<svg xmlns=\"http://www.w3.org/2000/svg\">' + evt.detail.data + '</svg>', 'image/svg+xml');\n\t\t\t\t\t\t\tvar svgElement = svgDoc.documentElement.firstElementChild;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log('[CANVAS] Parsed SVG element:', svgElement);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (svgElement) {\n\t\t\t\t\t\t\t\t// Import the node to ensure proper namespace\n\t\t\t\t\t\t\t\tvar importedElement = document.importNode(svgElement, true);\n\t\t\t\t\t\t\t\tcanvas.appendChild(importedElement);\n\t\t\t\t\t\t\t\tconsole.log('[CANVAS] SVG element successfully added to canvas');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('[CANVAS] No SVG element found in parsed data');\n\t\t\t\t\t\t\t\tconsole.error('[CANVAS] Raw data was:', evt.detail.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('[CANVAS] Error processing canvas SSE event:', error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Log HTMX SSE connection events\n\t\t\t\tdocument.addEventListener('htmx:sseOpen', function(evt) {\n\t\t\t\t\tconsole.log('[HTMX SSE] Connection opened:', evt);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tdocument.addEventListener('htmx:sseError', function(evt) {\n\t\t\t\t\tconsole.log('[HTMX SSE] Connection error:', evt);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tdocument.addEventListener('htmx:sseClose', function(evt) {\n\t\t\t\t\tconsole.log('[HTMX SSE] Connection closed:', evt);\n\t\t\t\t});\n\t\t\t\tvar toolSelect = document.getElementById('tool-select');\n\t\t\t\tvar colorPicker = document.getElementById('color-picker');\n\t\t\t\tvar brushSizeSlider = document.getElementById('brush-size');\n\t\t\t\tvar sizeDisplay = document.getElementById('size-display');\n\t\t\t\t\n\t\t\t\t// Update tool settings\n\t\t\t\ttoolSelect.addEventListener('change', function() {\n\t\t\t\t\tcurrentTool = this.value;\n\t\t\t\t\tupdateCursor();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tcolorPicker.addEventListener('change', function() {\n\t\t\t\t\tcurrentColor = this.value;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tbrushSizeSlider.addEventListener('input', function() {\n\t\t\t\t\tbrushSize = this.value;\n\t\t\t\t\tsizeDisplay.textContent = this.value;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfunction updateCursor() {\n\t\t\t\t\tswitch(currentTool) {\n\t\t\t\t\t\tcase 'pen':\n\t\t\t\t\t\t\tcanvas.style.cursor = 'crosshair';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'rect':\n\t\t\t\t\t\tcase 'circle':\n\t\t\t\t\t\t\tcanvas.style.cursor = 'copy';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tcanvas.style.cursor = 'text';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Drawing handlers\n\t\t\t\tcanvas.addEventListener('mousedown', startDrawing);\n\t\t\t\tcanvas.addEventListener('mousemove', draw);\n\t\t\t\tcanvas.addEventListener('mouseup', stopDrawing);\n\t\t\t\tcanvas.addEventListener('mouseleave', stopDrawing);\n\t\t\t\t\n\t\t\t\tfunction getMousePos(e) {\n\t\t\t\t\tvar rect = canvas.getBoundingClientRect();\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: e.clientX - rect.left,\n\t\t\t\t\t\ty: e.clientY - rect.top\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction startDrawing(e) {\n\t\t\t\t\tif (currentTool === 'pen') {\n\t\t\t\t\t\tisDrawing = true;\n\t\t\t\t\t\tvar pos = getMousePos(e);\n\t\t\t\t\t\tcurrentPath = 'M' + pos.x + ',' + pos.y;\n\t\t\t\t\t} else if (currentTool === 'text') {\n\t\t\t\t\t\tvar pos = getMousePos(e);\n\t\t\t\t\t\tvar text = prompt('Enter text:');\n\t\t\t\t\t\tif (text) {\n\t\t\t\t\t\t\t// Create text element immediately\n\t\t\t\t\t\t\tvar textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n\t\t\t\t\t\t\ttextElement.id = 'temp-' + Date.now();\n\t\t\t\t\t\t\ttextElement.setAttribute('x', pos.x);\n\t\t\t\t\t\t\ttextElement.setAttribute('y', pos.y);\n\t\t\t\t\t\t\ttextElement.setAttribute('fill', currentColor);\n\t\t\t\t\t\t\ttextElement.setAttribute('font-family', 'Inter, sans-serif');\n\t\t\t\t\t\t\ttextElement.setAttribute('font-size', '16');\n\t\t\t\t\t\t\ttextElement.textContent = text;\n\t\t\t\t\t\t\tcanvas.appendChild(textElement);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsendDrawingData('text', `x=\"${pos.x}\" y=\"${pos.y}\" text=\"${text}\"`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction draw(e) {\n\t\t\t\t\tif (!isDrawing || currentTool !== 'pen') return;\n\t\t\t\t\t\n\t\t\t\t\tvar pos = getMousePos(e);\n\t\t\t\t\tcurrentPath += ' L' + pos.x + ',' + pos.y;\n\t\t\t\t\t\n\t\t\t\t\t// Update preview path immediately for visual feedback\n\t\t\t\t\tvar previewPath = document.getElementById('preview-path');\n\t\t\t\t\tif (!previewPath) {\n\t\t\t\t\t\tpreviewPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\t\t\t\t\t\tpreviewPath.id = 'preview-path';\n\t\t\t\t\t\tpreviewPath.setAttribute('stroke', currentColor);\n\t\t\t\t\t\tpreviewPath.setAttribute('stroke-width', '3');\n\t\t\t\t\t\tpreviewPath.setAttribute('fill', 'none');\n\t\t\t\t\t\tpreviewPath.setAttribute('stroke-linecap', 'round');\n\t\t\t\t\t\tpreviewPath.setAttribute('stroke-linejoin', 'round');\n\t\t\t\t\t\tcanvas.appendChild(previewPath);\n\t\t\t\t\t}\n\t\t\t\t\tpreviewPath.setAttribute('d', currentPath);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction stopDrawing(e) {\n\t\t\t\t\tif (!isDrawing) return;\n\t\t\t\t\tisDrawing = false;\n\t\t\t\t\t\n\t\t\t\t\tif (currentTool === 'pen' && currentPath) {\n\t\t\t\t\t\t// Remove preview path\n\t\t\t\t\t\tvar previewPath = document.getElementById('preview-path');\n\t\t\t\t\t\tif (previewPath) {\n\t\t\t\t\t\t\tpreviewPath.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Create permanent path element immediately\n\t\t\t\t\t\tvar pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\t\t\t\t\t\tpathElement.id = 'temp-' + Date.now();\n\t\t\t\t\t\tpathElement.setAttribute('d', currentPath);\n\t\t\t\t\t\tpathElement.setAttribute('stroke', currentColor);\n\t\t\t\t\t\tpathElement.setAttribute('stroke-width', '3');\n\t\t\t\t\t\tpathElement.setAttribute('fill', 'none');\n\t\t\t\t\t\tpathElement.setAttribute('stroke-linecap', 'round');\n\t\t\t\t\t\tpathElement.setAttribute('stroke-linejoin', 'round');\n\t\t\t\t\t\tcanvas.appendChild(pathElement);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Send to server\n\t\t\t\t\t\tsendDrawingData('path', currentPath);\n\t\t\t\t\t\tcurrentPath = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handle shape drawing (simplified - could be enhanced with drag-to-size)\n\t\t\t\tcanvas.addEventListener('click', function(e) {\n\t\t\t\t\tif (currentTool === 'rect' || currentTool === 'circle') {\n\t\t\t\t\t\tvar pos = getMousePos(e);\n\t\t\t\t\t\tvar size = brushSize * 10; // Scale size for shapes\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (currentTool === 'rect') {\n\t\t\t\t\t\t\t// Create rect element immediately\n\t\t\t\t\t\t\tvar rectElement = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n\t\t\t\t\t\t\trectElement.id = 'temp-' + Date.now();\n\t\t\t\t\t\t\trectElement.setAttribute('x', pos.x-size/2);\n\t\t\t\t\t\t\trectElement.setAttribute('y', pos.y-size/2);\n\t\t\t\t\t\t\trectElement.setAttribute('width', size);\n\t\t\t\t\t\t\trectElement.setAttribute('height', size);\n\t\t\t\t\t\t\trectElement.setAttribute('fill', currentColor);\n\t\t\t\t\t\t\trectElement.setAttribute('opacity', '0.7');\n\t\t\t\t\t\t\tcanvas.appendChild(rectElement);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsendDrawingData('rect', `x=\"${pos.x-size/2}\" y=\"${pos.y-size/2}\" width=\"${size}\" height=\"${size}\"`);\n\t\t\t\t\t\t} else if (currentTool === 'circle') {\n\t\t\t\t\t\t\t// Create circle element immediately\n\t\t\t\t\t\t\tvar circleElement = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n\t\t\t\t\t\t\tcircleElement.id = 'temp-' + Date.now();\n\t\t\t\t\t\t\tcircleElement.setAttribute('cx', pos.x);\n\t\t\t\t\t\t\tcircleElement.setAttribute('cy', pos.y);\n\t\t\t\t\t\t\tcircleElement.setAttribute('r', size/2);\n\t\t\t\t\t\t\tcircleElement.setAttribute('fill', currentColor);\n\t\t\t\t\t\t\tcircleElement.setAttribute('opacity', '0.7');\n\t\t\t\t\t\t\tcanvas.appendChild(circleElement);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsendDrawingData('circle', `cx=\"${pos.x}\" cy=\"${pos.y}\" r=\"${size/2}\"`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfunction sendDrawingData(type, data) {\n\t\t\t\t\t// Send to server in background (no visual feedback needed since we already drew it)\n\t\t\t\t\tfetch('/experiments/ultrathink/draw', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t\t\t'X-Originator-ID': originatorId\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: `type=${type}&data=${encodeURIComponent(data)}&color=${encodeURIComponent(currentColor)}`\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tupdateCursor();\n\t\t\t\tconsole.log('ULTRATHINK initialized with originator:', originatorId);\n\t\t\t})();\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = ultrathinkScriptHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var28), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
